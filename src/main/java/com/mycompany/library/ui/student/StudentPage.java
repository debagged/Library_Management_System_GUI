package com.mycompany.library.ui.student;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.Timer;

import com.mycompany.library.functions.LibraryFunctions;
import com.mycompany.library.ui.mainpage.LogInPage;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;

public class StudentPage extends javax.swing.JFrame {

    public static String userID = null;
    public static StudentPage instance;

    public StudentPage() {

        instance = this;
        
        initComponents();
        initListeners();
        cardPanel.add(minimizedPanel, "minimized");
        cardPanel.add(expandedPanel, "extended");

        cardPanel2.add(booksScrollPane, "viewBooks");
        booksScrollPane.setName("viewBooks");

        cardPanel2.add(borrowedBooksScrollPane, "viewBorrowedBooks");
        borrowedBooksScrollPane.setName("viewBorrowedBooks");

        getContentPane().setBackground(java.awt.Color.decode("#91B577"));
        
        addBooksToPanel();
        addBorrowedBooksToPanel();

        changeScrollBarLook(booksScrollPane);
        changeScrollBarLook(borrowedBooksScrollPane);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sidePanel = new javax.swing.JPanel();
        viewBooksButton = new custom.components.RoundedPanel();
        viewBooksLabel = new javax.swing.JLabel();
        viewBorrowedBooksButton = new custom.components.RoundedPanel();
        viewBorrowedLabel = new javax.swing.JLabel();
        cardPanel = new javax.swing.JPanel();
        minimizedPanel = new javax.swing.JPanel();
        smallLogoLabel = new javax.swing.JLabel();
        expandedPanel = new javax.swing.JPanel();
        olfu_lms_label = new javax.swing.JLabel();
        olfu_logo_label = new javax.swing.JLabel();
        student_label = new javax.swing.JLabel();
        burgerButtonPanel = new custom.components.RoundedPanel();
        burgerButton = new javax.swing.JLabel();
        logOutPanel = new custom.components.RoundedPanel();
        logOutLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        searchBar = new custom.components.RoundedTextField();
        cardPanel2 = new javax.swing.JPanel();
        booksScrollPane = new javax.swing.JScrollPane();
        booksPanel = new javax.swing.JPanel();
        borrowedBooksScrollPane = new javax.swing.JScrollPane();
        borrowedBooksPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Page");
        setBackground(Color.decode("#91B577"));
        setMinimumSize(new java.awt.Dimension(800, 600));

        sidePanel.setBackground(new java.awt.Color(255, 255, 242));
        sidePanel.setPreferredSize(new java.awt.Dimension(75, 156));

        viewBooksButton.setBackground(new java.awt.Color(255, 255, 255));
        viewBooksButton.setBorderRadius(35);
        viewBooksButton.setBorderThickness(2);
        viewBooksButton.setBorderVisible(true);
        viewBooksButton.setMaximumSize(new java.awt.Dimension(183, 60));
        viewBooksButton.setMinimumSize(new java.awt.Dimension(60, 63));
        viewBooksButton.setPreferredSize(new java.awt.Dimension(60, 63));
        viewBooksButton.setVerifyInputWhenFocusTarget(false);

        viewBooksLabel.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        viewBooksLabel.setForeground(new java.awt.Color(79, 82, 78));
        viewBooksLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        viewBooksLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/search_books_icon_SMALL.png"))); // NOI18N
        viewBooksLabel.setIconTextGap(5);
        viewBooksLabel.setPreferredSize(new java.awt.Dimension(130, 40));

        javax.swing.GroupLayout viewBooksButtonLayout = new javax.swing.GroupLayout(viewBooksButton);
        viewBooksButton.setLayout(viewBooksButtonLayout);
        viewBooksButtonLayout.setHorizontalGroup(
            viewBooksButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewBooksButtonLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(viewBooksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        viewBooksButtonLayout.setVerticalGroup(
            viewBooksButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(viewBooksLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        viewBorrowedBooksButton.setBackground(new java.awt.Color(255, 255, 242));
        viewBorrowedBooksButton.setBorderRadius(35);
        viewBorrowedBooksButton.setBorderThickness(2);
        viewBorrowedBooksButton.setBorderVisible(false);
        viewBorrowedBooksButton.setMinimumSize(new java.awt.Dimension(60, 63));
        viewBorrowedBooksButton.setPreferredSize(new java.awt.Dimension(60, 63));

        viewBorrowedLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        viewBorrowedLabel.setForeground(new java.awt.Color(79, 82, 78));
        viewBorrowedLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        viewBorrowedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/borrow_books_icon_SMALL.png"))); // NOI18N
        viewBorrowedLabel.setIconTextGap(5);
        viewBorrowedLabel.setMaximumSize(new java.awt.Dimension(145, 40));
        viewBorrowedLabel.setMinimumSize(new java.awt.Dimension(145, 40));
        viewBorrowedLabel.setPreferredSize(new java.awt.Dimension(145, 40));

        javax.swing.GroupLayout viewBorrowedBooksButtonLayout = new javax.swing.GroupLayout(viewBorrowedBooksButton);
        viewBorrowedBooksButton.setLayout(viewBorrowedBooksButtonLayout);
        viewBorrowedBooksButtonLayout.setHorizontalGroup(
            viewBorrowedBooksButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewBorrowedBooksButtonLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(viewBorrowedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );
        viewBorrowedBooksButtonLayout.setVerticalGroup(
            viewBorrowedBooksButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewBorrowedBooksButtonLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(viewBorrowedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cardPanel.setOpaque(false);
        cardPanel.setLayout(new java.awt.CardLayout());

        minimizedPanel.setOpaque(false);

        smallLogoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fatima_logo_small.png"))); // NOI18N
        smallLogoLabel.setText("jLabel2");

        javax.swing.GroupLayout minimizedPanelLayout = new javax.swing.GroupLayout(minimizedPanel);
        minimizedPanel.setLayout(minimizedPanelLayout);
        minimizedPanelLayout.setHorizontalGroup(
            minimizedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(minimizedPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(smallLogoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        minimizedPanelLayout.setVerticalGroup(
            minimizedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(minimizedPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(smallLogoLabel)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        cardPanel.add(minimizedPanel, "card2");

        expandedPanel.setOpaque(false);

        olfu_lms_label.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        olfu_lms_label.setForeground(new java.awt.Color(79, 82, 78));
        olfu_lms_label.setText("OLFU LMS");

        olfu_logo_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/olfu_logo_big.png"))); // NOI18N
        olfu_logo_label.setText("jLabel2");

        student_label.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        student_label.setForeground(new java.awt.Color(79, 82, 78));
        student_label.setText("STUDENT");

        javax.swing.GroupLayout expandedPanelLayout = new javax.swing.GroupLayout(expandedPanel);
        expandedPanel.setLayout(expandedPanelLayout);
        expandedPanelLayout.setHorizontalGroup(
            expandedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(expandedPanelLayout.createSequentialGroup()
                .addGroup(expandedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(expandedPanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(expandedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(expandedPanelLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(olfu_logo_label, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(olfu_lms_label)))
                    .addGroup(expandedPanelLayout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(student_label)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        expandedPanelLayout.setVerticalGroup(
            expandedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(expandedPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(olfu_lms_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(olfu_logo_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(student_label)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        cardPanel.add(expandedPanel, "card3");

        burgerButtonPanel.setBackground(new Color(0,0,0,0));
        burgerButtonPanel.setBorderRadius(30);
        burgerButtonPanel.setBorderVisible(false);
        burgerButtonPanel.setDoubleBuffered(false);
        burgerButtonPanel.setFocusable(false);
        burgerButtonPanel.setRequestFocusEnabled(false);
        burgerButtonPanel.setVerifyInputWhenFocusTarget(false);

        burgerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/burger_smaller_green.png"))); // NOI18N

        javax.swing.GroupLayout burgerButtonPanelLayout = new javax.swing.GroupLayout(burgerButtonPanel);
        burgerButtonPanel.setLayout(burgerButtonPanelLayout);
        burgerButtonPanelLayout.setHorizontalGroup(
            burgerButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(burgerButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(burgerButton)
                .addContainerGap())
        );
        burgerButtonPanelLayout.setVerticalGroup(
            burgerButtonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(burgerButtonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(burgerButton)
                .addContainerGap())
        );

        burgerButton.getAccessibleContext().setAccessibleParent(sidePanel);

        logOutPanel.setBackground(new Color(0,0,0,0));
        logOutPanel.setBorderRadius(30);

        logOutLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logOutLabel.setForeground(new java.awt.Color(79, 82, 78));
        logOutLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        logOutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons/logout_green_25x25.png"))); // NOI18N
        logOutLabel.setIconTextGap(8);

        javax.swing.GroupLayout logOutPanelLayout = new javax.swing.GroupLayout(logOutPanel);
        logOutPanel.setLayout(logOutPanelLayout);
        logOutPanelLayout.setHorizontalGroup(
            logOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logOutPanelLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(logOutLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );
        logOutPanelLayout.setVerticalGroup(
            logOutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, logOutPanelLayout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addComponent(logOutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        jSeparator1.setBackground(new java.awt.Color(103, 120, 97));
        jSeparator1.setForeground(new java.awt.Color(103, 120, 97));

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sidePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewBorrowedBooksButton, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)
                            .addComponent(viewBooksButton, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)))
                    .addGroup(sidePanelLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(burgerButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(sidePanelLayout.createSequentialGroup()
                                .addComponent(logOutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(1, 1, 1)))
                        .addGap(14, 14, 14)))
                .addContainerGap())
            .addComponent(jSeparator1)
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addComponent(cardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(viewBooksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewBorrowedBooksButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(burgerButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logOutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        searchBar.setBackground(Color.decode("#91B577"));
        searchBar.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 15, 0, 15));
        searchBar.setForeground(new java.awt.Color(255, 255, 255));
        searchBar.setBorderColor(java.awt.Color.white);
        searchBar.setBorderRadius(35);
        searchBar.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N

        cardPanel2.setLayout(new java.awt.CardLayout());

        booksScrollPane.setBorder(null);
        booksScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        booksScrollPane.setOpaque(false);
        booksScrollPane.setPreferredSize(new Dimension(cardPanel2.getWidth(), cardPanel2.getHeight()));
        booksScrollPane.setViewportView(booksPanel);

        booksPanel.setBackground(Color.decode("#91B577"));
        booksPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));
        booksScrollPane.setViewportView(booksPanel);

        cardPanel2.add(booksScrollPane, "card2");

        borrowedBooksScrollPane.setBorder(null);
        borrowedBooksScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        borrowedBooksScrollPane.setOpaque(false);

        borrowedBooksPanel.setBackground(Color.decode("#91B577"));
        borrowedBooksPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));
        borrowedBooksScrollPane.setViewportView(borrowedBooksPanel);

        cardPanel2.add(borrowedBooksScrollPane, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cardPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                    .addComponent(searchBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cardPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private custom.components.RoundedPanel createBookPanel(String title, String author, ImageIcon bookCover, HashMap<JPanel, JLabel> labelMap){

        custom.components.RoundedPanel bookPanel = new custom.components.RoundedPanel();
            bookPanel.setPreferredSize(new Dimension(165, 285));
            bookPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 10));
            bookPanel.setBorderVisible(false);
            bookPanel.setOpaque(true);
            bookPanel.setBackground(new Color(255, 255, 255, 0));
            bookPanel.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    MouseEntered(evt);
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    MouseExited(evt);
                }

                public void mousePressed(java.awt.event.MouseEvent evt) {
                    MousePressed(evt);
                }
            });

            JLabel bookLabel = new JLabel();
            bookLabel.setIcon(bookCover);
            bookLabel.setText("<html><div style='text-align: center;'>" +
                                title.replace("&", "&amp;") + "<br><i>" +
                                author + "</i></div></html>");
                                
            bookLabel.setFont(new Font("Serif", Font.BOLD, 15));
            bookLabel.setHorizontalTextPosition(JLabel.CENTER);
            bookLabel.setVerticalTextPosition(JLabel.BOTTOM);
            bookLabel.setHorizontalAlignment(JLabel.CENTER);
            bookLabel.setIconTextGap(5);

            bookPanel.add(bookLabel);
            labelMap.put(bookPanel, bookLabel);

            return bookPanel;
    }

    ArrayList<JPanel> bookPanelsList = new ArrayList<>();
    HashMap<JPanel, JLabel> bookLabelsList = new HashMap<>();
    
    public void addBooksToPanel() {

        booksPanel.removeAll();
        bookPanelsList.clear();
        bookLabelsList.clear();

        List<LibraryFunctions.bookInfos> booksFromDB = LibraryFunctions.fetchBookData();
        List<LibraryFunctions.BorrowedBookInfos> borrowedBooksFromDB = LibraryFunctions.fetchBorrowedBookData();

        for (LibraryFunctions.bookInfos book : booksFromDB) {

            boolean isBorrowed = false;
            for (LibraryFunctions.BorrowedBookInfos borrowedBook : borrowedBooksFromDB){
                if(borrowedBook.isbn.equals(book.isbn)){
                    isBorrowed = true;
                    break;
                }
            }

            if(isBorrowed) continue;

            String title = book.title;
            String author = book.author;

            ImageIcon bookCover = book.cover;  // Already scaled from fetchBookData()

            custom.components.RoundedPanel viewBooksPanel = createBookPanel(title, author, bookCover, bookLabelsList);
            booksPanel.add(viewBooksPanel);
            bookPanelsList.add(viewBooksPanel);
        }

        booksPanel.revalidate();
        booksPanel.repaint();
        resizeBooksPanel(bookPanelsList, booksPanel, booksScrollPane);
    }

    static ArrayList<JPanel> borrowedBookPanelsList = new ArrayList<>();
    static HashMap<JPanel, JLabel> borrowedBookLabelsList = new HashMap<>();
    
    public void addBorrowedBooksToPanel() {

        borrowedBooksPanel.removeAll();
        borrowedBookPanelsList.clear();
        borrowedBookLabelsList.clear();

        List<LibraryFunctions.bookInfos> booksFromDB = LibraryFunctions.fetchBookData();
        List<LibraryFunctions.BorrowedBookInfos> borrowedBooksFromDB = LibraryFunctions.fetchBorrowedBookData();

        for (LibraryFunctions.bookInfos book : booksFromDB) {
            for (LibraryFunctions.BorrowedBookInfos borrowedBook : borrowedBooksFromDB){
                if(borrowedBook.isbn.equals(book.isbn) &&
                    borrowedBook.id.equals(userID)){

                    String title = book.title;
                    String author = book.author;
                    ImageIcon bookCover = book.cover;

                    custom.components.RoundedPanel viewBorrowedBooksPanel = createBookPanel(title, author, bookCover, borrowedBookLabelsList);
                    borrowedBooksPanel.add(viewBorrowedBooksPanel);
                    borrowedBookPanelsList.add(viewBorrowedBooksPanel);
                }
            }
        }

        borrowedBooksPanel.revalidate();
        borrowedBooksPanel.repaint();
        resizeBooksPanel(borrowedBookPanelsList, borrowedBooksPanel, borrowedBooksScrollPane);
    }

    private static void resizeBooksPanel(ArrayList list, JPanel panel, JScrollPane scrollPane){
        int bookPanelWidth = 170;
        int bookPanelHeight = 290;

        int containerWidth = scrollPane.getViewport().getWidth();
        if (containerWidth == 0) containerWidth = 700;

        int booksPerRow = containerWidth / bookPanelWidth;
        if (booksPerRow == 0) booksPerRow = 1;

        int rows = (int) Math.ceil((double) list.size() / booksPerRow);
        int heightNeeded = rows * bookPanelHeight + (rows * 10); // spacing

        panel.setPreferredSize(new Dimension(containerWidth, heightNeeded));

        panel.revalidate();
        panel.repaint();
    }
    
    private void changeScrollBarLook(JScrollPane scrollPane) {
        javax.swing.JScrollBar verticalBar = scrollPane.getVerticalScrollBar();
        verticalBar.setUnitIncrement(10);
        verticalBar.setUI(new javax.swing.plaf.basic.BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = new java.awt.Color(105, 140, 75); // Scroll thumb
                this.trackColor = new java.awt.Color(204, 224, 191);  // Scroll track
            }

            @Override
            protected JButton createDecreaseButton(int orientation) {
                return createZeroButton();
            }

            @Override
            protected JButton createIncreaseButton(int orientation) {
                return createZeroButton();
            }

            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                button.setMinimumSize(new Dimension(0, 0));
                button.setMaximumSize(new Dimension(0, 0));
                return button;
            }

            @Override
            protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds) {
                if (thumbBounds.isEmpty() || !scrollbar.isEnabled()) return;

                Graphics2D g2 = (Graphics2D) g.create();
                g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                g2.setPaint(thumbColor);
                int arc = 10; // Change this for more or less roundness
                g2.fillRoundRect(thumbBounds.x, thumbBounds.y, thumbBounds.width, thumbBounds.height, arc, arc);

                g2.dispose();
            }

            @Override
            protected void paintTrack(Graphics g, JComponent c, Rectangle trackBounds) {
                Graphics2D g2 = (Graphics2D) g.create();
                g2.setPaint(trackColor);
                g2.fillRect(trackBounds.x, trackBounds.y, trackBounds.width, trackBounds.height);
                g2.dispose();
            }

            @Override
            public Dimension getPreferredSize(JComponent c) {
                // This controls scrollbar thickness:
                return new Dimension(8, 0); // 8px wide for vertical scrollbar
            }
        });
    }
    
    private boolean isExpanded = false;
    private Timer animationTimer;
    private final int COLLAPSED_WIDTH = 75;
    private final int EXPANDED_WIDTH = 200;
    private final int STEP = 15; // pixels per animation frame
    private final int DELAY = 5; // ms between frames

    private void animateSidePanel(boolean currentlyExpanded){
        CardLayout cl = (CardLayout)(cardPanel.getLayout());
        int startWidth = currentlyExpanded ? EXPANDED_WIDTH : COLLAPSED_WIDTH;
        int targetWidth = currentlyExpanded ? COLLAPSED_WIDTH : EXPANDED_WIDTH;
        int direction = currentlyExpanded ? -STEP : STEP;
    
        animationTimer = new Timer(DELAY, null);
        animationTimer.addActionListener(new ActionListener() {
            int width = startWidth;

            public void actionPerformed(ActionEvent e) {
                width += direction;
                if ((direction > 0 && width >= targetWidth) || (direction < 0 && width <= targetWidth)) {
                    width = targetWidth;
                    animationTimer.stop();
                }
    
                sidePanel.setPreferredSize(new Dimension(width, sidePanel.getHeight()));

                String visibleCard = (width > 150) ? "extended" : "minimized";
                cl.show(cardPanel,visibleCard);

                viewBooksLabel.setText((width > 150) ? "View Books" : "");
                viewBorrowedLabel.setText((width > 150) ? "<html>View&nbsp;Borrowed<br>Books</html>" : "");
                logOutLabel.setText((width > 150) ? "Log Out" : "");

                sidePanel.revalidate();
                sidePanel.repaint();
                
                resizeBooksPanel(bookPanelsList, booksPanel, booksScrollPane);
                resizeBooksPanel(borrowedBookPanelsList, borrowedBooksPanel, borrowedBooksScrollPane);
            }

        });
    
        animationTimer.start();
    }

    private void highlightButton(JPanel selectedButton) {
        viewBooksButton.setBorderVisible(false);
        viewBorrowedBooksButton.setBorderVisible(false);

        ((custom.components.RoundedPanel) selectedButton).setBorderVisible(true);
    }

    private Component getVisibleCard(Container parent){
        for(Component comp : parent.getComponents()){
            if(comp.isVisible()){
                return comp;
            }
        }
        return null;
    }

    private void initListeners(){

        java.awt.event.MouseAdapter mouseAdapters = new java.awt.event.MouseAdapter(){
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MousePressed(evt);
            }
        };

        JComponent[] components = {
            burgerButton, burgerButtonPanel, viewBooksButton,
            viewBorrowedBooksButton, logOutLabel
        };

        for(JComponent comp : components){
            comp.addMouseListener(mouseAdapters);
        }
        
        searchBar.addKeyListener(new KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent e){
                KeyReleased(e);
            }
        });
    }

    private void MouseEntered(java.awt.event.MouseEvent evt){

        Object source = evt.getSource();

        if (StudentPageFunctions.setPanelHoverBackground(bookPanelsList, source, new Color(255, 255, 255, 80))) {return;}
        else if (StudentPageFunctions.setPanelHoverBackground(borrowedBookPanelsList, source, new Color(255, 255, 255, 80))) {return;}

        if(source == viewBooksButton){
            if(getVisibleCard(cardPanel2).getName().equals("viewBooks")){ return; }
            viewBooksButton.setBackground(new Color(141,181,119,200));
        
        } else if(source == viewBorrowedBooksButton){
            if(getVisibleCard(cardPanel2).getName().equals("viewBorrowedBooks")){ return; }
            viewBorrowedBooksButton.setBackground(new Color(141,181,119,200));
        
        } else if(source == burgerButton){
            burgerButtonPanel.setBackground(new Color(0,0,0,100));
        
        } else if(source == logOutLabel){
            logOutPanel.setBackground(new Color(0,0,0,100));
        }

        sidePanel.repaint();
    }

    private void MouseExited(java.awt.event.MouseEvent evt){

        Object source = evt.getSource();

        if (StudentPageFunctions.setPanelHoverBackground(bookPanelsList, source, new Color(255, 255, 255, 0))) {return;}
        else if (StudentPageFunctions.setPanelHoverBackground(borrowedBookPanelsList, source, new Color(255, 255, 255, 0))) {return;}

        if(evt.getSource()==viewBooksButton){
            viewBooksButton.setBackground(new Color(0,0,0,0));

        
        } else if(evt.getSource()==viewBorrowedBooksButton){
            viewBorrowedBooksButton.setBackground(new Color(0,0,0,0));

        
        } else if(evt.getSource()==burgerButton){
            burgerButtonPanel.setBackground(new Color(0,0,0,0));

        
        } else if(evt.getSource()==logOutLabel){
            logOutPanel.setBackground(new Color(0,0,0,0));

        }

        sidePanel.repaint();
    }

    public static JDialog viewBooksDialog = new JDialog((JFrame) null, "View Book", true);

    private void MousePressed(java.awt.event.MouseEvent evt){

        Object source = evt.getSource();

        CardLayout cl = (CardLayout) cardPanel2.getLayout();
        searchBar.setVisible(true);

        if(evt.getSource() == burgerButton && (animationTimer == null || !animationTimer.isRunning())){
            animateSidePanel(isExpanded);
            isExpanded = !isExpanded;
        }

        for(JPanel book : bookPanelsList){
            if(source == book && getVisibleCard(cardPanel2).getName().equals("viewBooks")){
                String bookTitle = StudentPageFunctions.getTitleFromLabel(bookLabelsList.get(book));

                if(bookTitle != null){
                    StudentPageFunctions.BookInfo info = StudentPageFunctions.getBookInfo(bookTitle);

                    if(info != null){
                        StudentPageFunctions.showViewBookDialog(viewBooksDialog,info);
                        return;

                    } 
                }
            }
        }

        for(JPanel book : borrowedBookPanelsList){
            if(source == book && getVisibleCard(cardPanel2).getName().equals("viewBorrowedBooks")){
                String bookTitle = StudentPageFunctions.getTitleFromLabel(borrowedBookLabelsList.get(book));

                if(bookTitle != null){
                    StudentPageFunctions.BorrowedBookInfo borrowedBookInfo = StudentPageFunctions.getBorrowedBookInfo(bookTitle);

                    if(borrowedBookInfo != null){
                        StudentPageFunctions.showReturnBookDialog(borrowedBookInfo);
                        return;
                    }
                }
            }
        }

        if(evt.getSource()==viewBooksButton){
            cl.show(cardPanel2, "viewBooks");
            highlightButton(viewBooksButton);

            sidePanel.revalidate();
            sidePanel.repaint();
        }

        if(evt.getSource()==viewBorrowedBooksButton){
            cl.show(cardPanel2, "viewBorrowedBooks");
            highlightButton(viewBorrowedBooksButton);

            sidePanel.revalidate();
            sidePanel.repaint();
        }

        if(evt.getSource()==logOutLabel){
            int logOut = JOptionPane.showConfirmDialog(rootPane, 
                                                        "Are you sure you want to log out?",
                                                        "Log Out?", JOptionPane.YES_NO_OPTION);
            if(logOut == JOptionPane.YES_OPTION){
                this.dispose();
                new LogInPage().setVisible(true);
            }else{
                return;
            }
        }
    }

    public void KeyReleased(java.awt.event.KeyEvent e){

        JPanel panelUsed;

        if(getVisibleCard(cardPanel2).getName().equals("viewBooks")){

            String query = searchBar.getText().toLowerCase();

            for (JPanel panel : bookPanelsList) {

                JLabel label = bookLabelsList.get(panel);
                boolean visible = label.getText().toLowerCase().contains(query);
                panel.setVisible(visible);
            }

            panelUsed = booksPanel;

        } else{

            String query = searchBar.getText().toLowerCase();

            for (JPanel panel : borrowedBookPanelsList) {

                JLabel label = borrowedBookLabelsList.get(panel);
                boolean visible = label.getText().toLowerCase().contains(query);
                panel.setVisible(visible);
            }

            panelUsed = borrowedBooksPanel;
        }
        
        panelUsed.revalidate();
        panelUsed.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentPage().setVisible(true);
            }
     
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JPanel booksPanel;
    private static javax.swing.JScrollPane booksScrollPane;
    public static javax.swing.JPanel borrowedBooksPanel;
    private static javax.swing.JScrollPane borrowedBooksScrollPane;
    private javax.swing.JLabel burgerButton;
    private custom.components.RoundedPanel burgerButtonPanel;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JPanel cardPanel2;
    private javax.swing.JPanel expandedPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel logOutLabel;
    private custom.components.RoundedPanel logOutPanel;
    private javax.swing.JPanel minimizedPanel;
    private javax.swing.JLabel olfu_lms_label;
    private javax.swing.JLabel olfu_logo_label;
    private custom.components.RoundedTextField searchBar;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JLabel smallLogoLabel;
    private javax.swing.JLabel student_label;
    private custom.components.RoundedPanel viewBooksButton;
    private javax.swing.JLabel viewBooksLabel;
    private custom.components.RoundedPanel viewBorrowedBooksButton;
    private javax.swing.JLabel viewBorrowedLabel;
    // End of variables declaration//GEN-END:variables
}
